#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("ginrummy:server");
var http = require("http");
//probably a little too much responsibility for www but for now its ok

var models = require("../models");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */
// const socketIO = require("socket.io");
const server = http.createServer(app);
// const io = socketIO(server);
const io = require("../sockets/Socket")(server);

models.sequelize.sync().then(function() {
  /**
   * Listen on provided port, on all network interfaces.
   */
  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);

  //this may need to be outside the sequelize sync
  // io.on("connection", socket => {
  //   console.log(socket.client.id + " connected");

  //   //initialize the page with messages from chat
  //   db.any("SELECT message_text,time_stamp FROM messages WHERE room_id = 0", [
  //     true
  //   ])
  //     .then(function(data) {
  //       for (let i = 0; i < data.length; i++) {
  //         io.emit("chat message", data[i].message_text, data[i].time_stamp);
  //       }
  //     })
  //     .catch(function(error) {
  //       console.log(error);
  //     });

  //   //this should only be run if the room is the lobby
  //   //todo: figure out a way to get this in the routes
  //   db.any("SELECT room_name,password FROM rooms")
  //     .then(function(data) {
  //       for (let i = 0; i < data.length; i++) {
  //         io.emit("create room", data[i].room_name, data[i].password);
  //       }
  //     })
  //     .catch(function(error) {
  //       console.log(error);
  //     });

  //   require("../sockets/chatSocket")(socket, io);
  //   require("../sockets/roomsSocket")(socket, io);
  //   //this needs alot of its responsibilities moved, but it's tricky with how io works
  // });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
