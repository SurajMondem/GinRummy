#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("ginrummy:server");
var http = require("http");
//probably a little too much responsibility for www but for now its ok
const db = require("../routes/db/index");


var models = require("../models");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */
const socketIO = require("socket.io");
const server = http.createServer(app);
const io = socketIO(server);

models.sequelize.sync().then(function () {
  /**
   * Listen on provided port, on all network interfaces.
   */
  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);

  //this may need to be outside the sequelize sync
  io.on("connection", socket => {
    console.log("connected");

    db.any('SELECT message_text FROM messages WHERE room_id = 0', [true])
      .then(function (data) {
        for (let i = 0; i < data.length; i++) {
          io.emit('chat message', data[i].message_text);
        }
      })
      .catch(function (error) {
        console.log(error);
      });

    socket.on('chat message', function (msg) {
      //console.log("sending out message into db")

      //todo: ADD TIMESTAMP formatter function?

      db.any(
        `INSERT INTO messages (message_text,room_id,user_id,time_stamp) VALUES ('${msg}',0,18,'2017-08-19 14:22:11.802755+02')`
      )
        .catch(error => {
          console.log(error);
        });



      io.emit('chat message', msg);
    });

  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
